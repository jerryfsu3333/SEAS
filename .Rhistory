data.frame(x = 1, y = 1:10, fac = fac))
data.frame(x = 1, y = 1:10))
data.frame(x = 1, y = 1:10)
df <- data.frame(component = x, class = y)
df
debugSource('~/Documents/GitHub/ssdr/real_data.R')
data.frame(comp = x, class = y)
x
y
data.frame(comp = drop(x), class = y)
dim(y)
is.null(dim(y))
is.null(dim(x))
is.null(dim(x_new_lasso))
debugSource('~/Documents/GitHub/ssdr/real_data.R')
df
df %>%
group_by(class) %>%
mutate(weight = 1 / n())
ggplot(df %>%
group_by(class) %>%
mutate(weight = 1 / n()),
aes(x=component, colour=class, fill=class)) +
# geom_histogram(aes(y=..density..), bins = 50, position = 'identity', alpha=0.5) +
geom_histogram(aes(weight = weight), stat = 'count', bins = 50, position = 'identity', alpha=0.5)
####################  NIR meat data #############################
hist_plot <- function(x, y, title){
if(!is.factor(y)){y <- factor(y)}
if(!is.null(dim(x))){x <- drop(x)}
df <- data.frame(component = x, class = y)
means <- sapply(unique(df$class), function(i){
mean(df$component[df$class==i])
})
means_df <- data.frame(means = means, class=unique(df$class))
g <- ggplot(df %>%
group_by(class) %>%
mutate(weight = 1 / n()),
aes(x=component, colour=class, fill=class)) +
# geom_histogram(aes(y=..density..), bins = 50, position = 'identity', alpha=0.5) +
geom_histogram(aes(weight = weight), bins = 50, position = 'identity', alpha=0.5) +
geom_density(alpha=0.7) +
geom_vline(data = means_df, aes(xintercept=means, color=class), linetype='dashed')+
theme(legend.position = 'none') +
labs(title = title)
g
}
debugSource('~/Documents/GitHub/ssdr/real_data.R')
hist_plot(x_new_lasso, y, 'Lasso')
####################  NIR meat data #############################
hist_plot <- function(x, y, title){
if(!is.factor(y)){y <- factor(y)}
if(!is.null(dim(x))){x <- drop(x)}
df <- data.frame(component = x, class = y)
means <- sapply(unique(df$class), function(i){
mean(df$component[df$class==i])
})
means_df <- data.frame(means = means, class=unique(df$class))
# g <- ggplot(df %>%
#               group_by(class) %>%
#               mutate(weight = 1 / n()),
# geom_histogram(aes(weight = weight), bins = 50, position = 'identity', alpha=0.5) +
g <- ggplot(df, aes(x=component, colour=class, fill=class)) +
geom_histogram(aes(y=..density..), bins = 50, position = 'identity', alpha=0.5) +
geom_density(alpha=0.3) +
geom_vline(data = means_df, aes(xintercept=means, color=class), linetype='dashed')+
theme(legend.position = 'none') +
labs(title = title)
g
}
hist_plot(x_new_lasso, y, 'Lasso')
#
fit <- ssdr.cv(x, y, lam1_fac = seq(2,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE, type = 'sir')
# fit <- ssdr.cv(x, y, lam1_fac = seq(2,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE, type = 'intra')
# fit <- ssdr.cv(x, y, lam1_fac = seq(1.5,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE,type = 'pfc', cut_y = FALSE, maxit_outer = 1e+4)
d <- fit$rank
directions <- svd(fit$Beta)$u[,1:d, drop=FALSE]
sum(directions != 0)
x_new <- as.matrix(x) %*% directions
hist_plot(x_new, y, 'SSDR-SIR')
#
# fit <- ssdr.cv(x, y, lam1_fac = seq(2,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE, type = 'sir')
fit <- ssdr.cv(x, y, lam1_fac = seq(2,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE, type = 'intra')
# fit <- ssdr.cv(x, y, lam1_fac = seq(1.5,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE,type = 'pfc', cut_y = FALSE, maxit_outer = 1e+4)
d <- fit$rank
directions <- svd(fit$Beta)$u[,1:d, drop=FALSE]
sum(directions != 0)
x_new <- as.matrix(x) %*% directions
hist_plot(x_new, y, 'SSDR-intra')
#
# fit <- ssdr.cv(x, y, lam1_fac = seq(2,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE, type = 'sir')
# fit <- ssdr.cv(x, y, lam1_fac = seq(2,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE, type = 'intra')
fit <- ssdr.cv(x, y, lam1_fac = seq(1.5,0.2, length.out = 10), lam2_fac = seq(0.001,0.2, length.out = 10), categorical=TRUE,type = 'pfc', cut_y = FALSE, maxit_outer = 1e+4)
d <- fit$rank
directions <- svd(fit$Beta)$u[,1:d, drop=FALSE]
sum(directions != 0)
x_new <- as.matrix(x) %*% directions
hist_plot(x_new, y, 'SSDR-PFC')
directions
LassoSIR_fit <- LassoSIR(x, y, H = 5, nfolds = 5, choosing.d = 'automatic')
d_LassoSIR <- LassoSIR_fit$no.dim
directions_Lassosir <- LassoSIR_fit$beta
sum(directions_Lassosir != 0)
x_new_Lassosir <- as.matrix(x) %*% directions_Lassosir
# df <- data.frame(Component=x_new_Lassosir, class=factor(y))
hist_plot(x_new_Lassosir, y, 'Lasso-SIR')
debugSource('~/Documents/GitHub/ssdr/real_data.R')
debugSource('~/Documents/GitHub/ssdr/real_data.R')
sum(directions_Lassosir != 0)
# df <- data.frame(Component=x_new_Lassosir, class=factor(y))
hist_plot(x_new_Lassosir, y, 'Lasso-SIR')
debugSource('~/Documents/GitHub/ssdr/real_data.R')
sum(directions_lasso != 0)
hist_plot(x_new_lasso, y, 'Lasso')
debugSource('~/Documents/GitHub/ssdr/real_data.R')
sum(directions_rifle != 0)
directions_rifle
hist_plot(x_new_rifle, y, 'Rifle-SIR')
cat(c('Time', 1))
cat(c('Time', 1))
cat(c('Time', 2))
cat(c('Time', 1, '\n'))
cat(c('Time', 2))
train_size <- 0.3
createDataPartition(y, p = train_size)
a <- createDataPartition(y, p = train_size)
a
a[[1]]
len(a[[1]])
length(a[[1]])
train_size <- 0.7
createDataPartition(y, p = train_size)
a <- createDataPartition(y, p = train_size)
a
length(a)
length(a[[1]])
73/length(y)
a <- createDataPartition(y, p = train_size, list = FALSE)
a
a <- drop(createDataPartition(y, p = train_size, list = FALSE))
a
x
x[a,:]
x[a,]
dim(x[a,])
length(y==1)/length(y)
y
length(y==1)/length(y)
length(y==1)
y == 1
sum(y == 1)/length(y)
a
y[a]
sum(y[a] == 1)/length(a)
sum(y[a] == 2)/length(a)
a <- drop(createDataPartition(factor(y), p = train_size, list = FALSE))
a
sum(y[a] == 1)/length(a)
sum(y[a] == 2)/length(a)
sum(y == 1)/length(y)
y <- factor(data[,1])
x <- data[,-1]
x <- scale(x)
data <- readMat('~/Documents/GitHub/ssdr/Real_dataset/NIR.mat')$data
y <- factor(data[,1])
x <- data[,-1]
x <- scale(x)
train_index <- drop(createDataPartition(y, p = train_size, list = FALSE))
sum(y[train_index] == 1)/length(train_index)
train_index
y
1:100 - train_index
1:100 %-% train_index
valid_index <- setdiff(seq_len(length(y)), train_index)
length(y)
valid_index
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
length(train_y)
predict(model, newx=new_test, type='response')
prediction
test_y
length(prediction)
dim(new_test)
length(train_y)
dim(new_train)
train_y
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
new_train
new_test
model
predict(model, newx=new_test, type='response')
new_test
predict(model, newx=drop(new_test), type='response')
train_dat <- data.frame(x = drop(new_train), y = train_y)
train_dat
model <- glm(y~x, data = train_dat, family = binomial())
model
predict(model, newx=new_test, type='response')
new_test
test_dat <- data.frame(x = drop(new_test))
test_dat
train_dat
predict(model, newx=test_dat, type='response')
model
predict(model, newx=test_dat)
predict(model, newx=new_train)
predict(model, newx=1)
predict(model, newx=2123213)
predict(model, newdata=test_dat)
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
predict(model, newdata=new_test, type='response')
train_x %*% directions_sir
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
train_dat
prediction
test_y
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
train_y
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
train_y
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
y
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
directions_lasso
train_dat
test_dat
source('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
source('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
prediction
drop(createDataPartition(y, p = train_size, list = FALSE))
drop(createDataPartition(y, p = train_size, list = FALSE))
drop(createDataPartition(y, p = train_size, list = FALSE))
drop(createDataPartition(y, p = train_size, list = FALSE))
a <- read.table('/Users/cengjing/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/prediction')
a
a[1,]
source('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
output
prediction
a[1,]
a <- read.table('/Users/cengjing/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/prediction')
a[1,]
a[2,]
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
data.frame(new_train, y = train_y)
new_train
data.frame(x = new_train, y = train_y)
data.frame(x)
data.frame(new_train)
a <- data.frame(new_train)
colnames(a)
colnames(a) <- paste0('X', seq_len(ncol(a)))
a
colnames(a)
cbind(y, a)
dim(a)
dim(a)
length(train_y)
cbind(train_y, a)
cbind(y = train_y, a)
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
new_train
new_train
new_test
train_dat
colnames(train_dat)
prediction
source('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
warnings()
output
x <- seq(-4, 4, 0.25)
x
y <- x > 0
glm(y~x, family = binomial())
a <- glm(y~x, family = binomial())
summary(a)
a <- read.table('/Users/cengjing/Documents/DIS/Record/2019/Aug30_2019/Cmat_Ccut/output2_05_1000')
results <- matrix(0, 2, dim(a)[2], dimnames = list(c('mean', 'sd'), colnames(a)))
for (i in seq_len(dim(a)[2])){
tmp <- na.omit(a[,i])
if((i%%6 %in% c(1,2))){
results[1,i] <- mean(tmp)*100
}else{
results[1,i] <- mean(tmp)
}
results[2,i] <- sd(tmp)/sqrt(length(tmp))*100
}
results <- round(results,3)
r_ratio <- sapply(c(3,9,15,21), function(i){
# r_ratio <- sapply(c(3,9,15,21,27,33), function(i){
tmp <- na.omit(a[,i])
# mean(tmp == 2)*100
mean(tmp == 1)*100
})
r_ratio <- round(r_ratio, 3)
cat(results['mean', 'distord_ssdrsir'], '(', results['sd', 'distord_ssdrsir'], ')', '&',
results['mean', 'r_ssdrsir'], '(', results['sd', 'r_ssdrsir'], ')', '&',
results['mean', 'C_ssdrsir'], '(', results['sd', 'C_ssdrsir'], ')', '&',
results['mean', 'IC_ssdrsir'], '(', results['sd', 'IC_ssdrsir'], ')\n', sep = '')
cat(results['mean', 'distord_ssdrintra'], '(', results['sd', 'distord_ssdrintra'], ')', '&',
results['mean', 'r_ssdrintra'], '(', results['sd', 'r_ssdrintra'], ')', '&',
results['mean', 'C_ssdrintra'], '(', results['sd', 'C_ssdrintra'], ')', '&',
results['mean', 'IC_ssdrintra'], '(', results['sd', 'IC_ssdrintra'], ')\n', sep = '')
cat(results['mean', 'distord_ssdrpfc'], '(', results['sd', 'distord_ssdrpfc'], ')', '&',
results['mean', 'r_ssdrpfc'], '(', results['sd', 'r_ssdrpfc'], ')', '&',
results['mean', 'C_ssdrpfc'], '(', results['sd', 'C_ssdrpfc'], ')', '&',
results['mean', 'IC_ssdrpfc'], '(', results['sd', 'IC_ssdrpfc'], ')\n', sep = '')
cat(results['mean', 'distord_LassoSIR'], '(', results['sd', 'distord_LassoSIR'], ')', '&',
results['mean', 'r_LassoSIR'], '(', results['sd', 'r_LassoSIR'], ')', '&',
results['mean', 'C_LassoSIR'], '(', results['sd', 'C_LassoSIR'], ')', '&',
results['mean', 'IC_LassoSIR'], '(', results['sd', 'IC_LassoSIR'], ')\n', sep = '')
cat(results['mean', 'distord_lasso'], '(', results['sd', 'distord_lasso'], ')', '&',
results['mean', 'r_lasso'], '(', results['sd', 'r_lasso'], ')', '&',
results['mean', 'C_lasso'], '(', results['sd', 'C_lasso'], ')', '&',
results['mean', 'IC_lasso'], '(', results['sd', 'IC_lasso'], ')\n', sep = '')
cat(results['mean', 'distord_rifle'], '(', results['sd', 'distord_rifle'], ')', '&',
results['mean', 'r_rifle'], '(', results['sd', 'r_rifle'], ')', '&',
results['mean', 'C_rifle'], '(', results['sd', 'C_rifle'], ')', '&',
results['mean', 'IC_rifle'], '(', results['sd', 'IC_rifle'], ')\n', sep = '')
a <- read.table('/Users/cengjing/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/prediction')
a
a[1,]
source('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
output
print(NULL)
a <- read.table('/Users/cengjing/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/prediction')
a
a <- read.table('/Users/cengjing/Downloads/prediction')
a
a <- sapply(1:3, function(x){list(1:2)})
a
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
result
eval_fold
eval_all
c(NA, 1, 3)
c(NULL, 1, 3)
sapply(1:3, c(NA,1,2))
sapply(1:3, function(x){c(NA,1,2)})
is.na(c(NA,1,2))
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
eval_all
eval_all[201:300,]
apply(eval_all[299:300,], 1, mean, na.rm=TRUE)
cvm
mean(eval_all[226,])
mean(eval_all[226,], rm.na=TRUE)
apply(eval_all[226:227,], 1, mean, rm.na=TRUE)
mean(eval_all[226,], na.rm=TRUE)
len()
which.min(c(1,2,NaN))
a <- read.table('/Users/cengjing/Downloads/prediction')
a
colMeans(a)
is.nan(c(1,2,NaN))
a <- read.table('/Users/cengjing/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/prediction')
a
colMeans(a)
options(digits = 4)
colMeans(a)
colMeans(a) * 100
100 - colMeans(a) * 100
cat(100 - colMeans(a) * 100, sep = '&')
as.matrix(1:10)
matrix(1:10)
s_func <- function(mat){
if(is.null(mat)){return(NA)}
if(is.vector(mat)){mat <- as.matrix(mat)}
l <- dim(mat)[1]
s <- sapply(1:l, function(i){
if(any(mat[i,] != 0)){
return(i)
}
})
return(s)
}
nz_func <- function(mat){
if(is.null(mat)){return(NA)}
if(is.vector(mat)){mat <- as.matrix(mat)}
l <- dim(mat)[1]
s <- sapply(1:l, function(i){
if(any(mat[i,] != 0)){
return(i)
}
})
return(s)
}
length(NA)
length(NaN)
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
mat
nz_sir
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
mat
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
nz_lassosir
which(directions_lassosir!=0)
a <- NA
a
a[1]
is.na(a[1])
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
if(length(nz_lassosir)==1 && is.na(nz_lassosir))
fsds
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
createResample(y)
createResample(y)[1]
createResample(y)[[1]]
table(createResample(y)[[1]])
createResample(y, list = FALSE)
data.frame(x,y)
times <- 1
samples <- createResample(data.frame(x,y), times = times)
samples[[1]]
length(samples[[1]])
samples <- createResample(y, times = times)
length(samples[[1]])
boot_nz <- vector(mode = 'list', length = 4)
boot_nz
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
index
boot_x[1:10,]
boot_x[1:10,1:10]
index
save(true_output, '~/Desktop/')
save(true_output, file = '~/Desktop/')
save(true_output, file = '~/Desktop/output')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
directions
true_output$directions[[1]]
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
dist
boot_rank
true_output$rank
boot_s
boot_dist
dist
names(dist)
c(dist)
rbind(boot_dist, c(dist))
unname(dit)
unname(dist)
rbind(boot_dist, unname(dist))
rbind(boot_dist, unname(dist))
boot_nz
boot_nz[1]
boot_output$nz
boot_output$nz[1]
c(boot_nz[1], boot_output$nz[1])
c(boot_nz[[1]], boot_output$nz[1])
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
boot_dist
boot_nz
boot_nz
boot_nz[[1]]
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
true_output$rank
true_output$s
boot_nz
boot_s
boot_rank
boot_s
boot_dist
source('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
output
output[[1]]
lapply(output, "[[", 1)
lapply(output, "[[", 2)
lapply(output, "[[", 3)
lapply(output, "[[", 4)
do.call(rbind, lapply(output, "[[", 1))
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
output
do.call(rbind, lapply(output, "[[", 1))
do.call(rbind, lapply(output, "[[", 2))
do.call(rbind, lapply(output, "[[", 3))
do.call(rbind, lapply(output, "[[", 4))
lapply(output, "[[", 4)
debugSource('~/Documents/GitHub/ssdr/Rdata_NIR_meat.R')
boot_rank
boot_s
boot_dist
boot_nz
save(boot_nz, file = '/Users/cengjing/Desktop/test4')
boot_rank <- rbind(true_output$rank, boot_rank)
true_output$rank
boot_rank
boot_s <- rbind(true_output$s, boot_s)
boot_s
true_output$nz
boot_nz
boot_nz <- c(true_output$nz, boot_nz)
boot_nz
list(true_output$nz)
boot_nz <- c(list(true_output$nz), boot_nz)
boot_nz
boot_nz[[1]]
boot_nz[[1]][[1]]
setwd('~/Documents/GitHub/ssdr/')
