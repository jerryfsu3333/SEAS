FALSE
}else{
# length(intersect(true, x))/length(union(true, x))
1-(length(union(true, x)) - length(intersect(true, x)))/tot
}
})) * 100
cst <- round(cst, digits = 3)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
# Select the top 10
freq <- as.vector(tab[1:min(10,length(tab))]/length(nz) * 100)
name <- name[1:min(10,length(name))]
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group=1))+
geom_line()+
geom_point(size=1)+
ylim(c(0,100))+
scale_x_continuous(breaks = 1:length(name), labels = name)+
xlab('variable index')+
ylab('Appearance frequency (%)')+
theme(
plot.title = element_text(size=16),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16)
)+
labs(title = paste0(titles[k], ' (consistency = ', cst, '%)'))
print(g)
}
# 2. Cumulative apperance
titles = c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# titles = c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
for (k in 1:4){
# nz <- lapply(ord_est, '[[', k)
nz <- lapply(boot_nz, '[[', k)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
freq <- sapply(seq_len(length(name)), function(i){
ind <- name[1:i]
num <- mean(sapply(nz, function(x){
if (!is.numeric(x)){
0
}else{
all(ind %in% x)
}
})) * 100
})
# select larger than 10%
freq <- freq[1:min(10,length(freq))]
name <- name[1:min(10,length(name))]
area <- trapz(1:length(freq), freq)/100
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group = 1))+
geom_line()+
geom_point(size=1)+
scale_x_continuous(breaks = 1:length(name), labels = name)+
ylim(c(0,100))+
xlab('variable index')+
ylab('Cumulative appearance frequency (%)')+
theme(
plot.title = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12)
)+
labs(title = paste0(titles[k], ' (AUC = ', area, ')'))
# theme(axis.text.x=element_text(angle=45, size = 4, vjust = 0.8))
print(g)
}
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/err_list_4_beef')
library(xtable)
err <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
colMeans(tmp, na.rm = TRUE)*100
})
std <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
apply(tmp, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(tmp))})*100
})
# tab <- matrix(paste0(round(err,2), '(', round(std,2), ')'), 4,4)
# colnames(tab) <- c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
# rownames(tab) <- c('Logistic', 'SVM', 'LDA', 'Random Forest')
# xtable(tab, caption = 'The classification error rate (\\%) and standard error ($\\times 10^{-2}$) based on 100 replicates.',
#        align = rep('c', dim(err)[2]+1))
tab <- matrix(paste0(round(err,2), '(', round(std,2), ')'), 4,4)
colnames(tab) <- c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
rownames(tab) <- c('Linear', 'Kernel (l.c.)', 'Random Forest', 'SVM')
xtable(tab, caption = 'The mean square error ($\\times 10^{-2}$) and standard error ($\\times 10^{-2}$) based on 100 replicates.',
align = rep('c', dim(err)[2]+1))
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/output_4_beef')
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/true_output_4_beef')
boot_rank <- do.call(rbind, lapply(output, '[[', 1))
boot_s <- do.call(rbind, lapply(output, '[[', 2))
boot_nz <- lapply(output, '[[', 4)
boot_dist <- do.call(rbind, lapply(output, '[[', 3))
ord <- lapply(output, '[[', 5)
ord_est <- lapply(output, '[[', 6)
result <- apply(boot_rank, 2, function(x){mean(x, na.rm = TRUE)})
std <- apply(boot_rank, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(boot_rank))*100})
tab <- matrix(paste0(round(result,2), '(', round(std,2), ')'), nrow = 1)
colnames(tab) <- c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# colnames(tab) <- c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
xtable(tab, caption = 'The average rank and standard errer ($\\times 10^{-2}$)',
align = rep('c', dim(tab)[2]+1))
result <- apply(boot_s, 2, function(x){mean(x, na.rm = TRUE)})
std <- apply(boot_s, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(boot_s))*100})
tab <- matrix(paste0(round(result,2), '(', round(std,2), ')'), nrow = 1)
colnames(tab) <- c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# colnames(tab) <- c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
xtable(tab, caption = 'The average sparsity and standard errer ($\\times 10^{-2}$)',
align = rep('c', dim(tab)[2]+1))
result <- apply(boot_dist, 2, function(x){mean(x, na.rm = TRUE)})
std <- apply(boot_dist, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(boot_dist))*100})
tab <- matrix(paste0(round(result,2), '(', round(std,2), ')'), nrow = 1)
colnames(tab) <- c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# colnames(tab) <- c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
xtable(tab, caption = 'The average distance $\\calD(\\hatbolbeta, \\hatbolbeta^b)$ and standard error ($\\times 10^{-2}$).',
align = rep('c', dim(tab)[2]+1))
# 1. Top 10 selected variables
titles = c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# titles = c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
true_nz <- true_output[[3]]
# true_nz <- true_output[[5]]
for (k in 1:4){
true <- true_nz[[k]]
nz <- lapply(boot_nz, '[[', k)
tot <- 103
# nz <- lapply(ord_est, '[[', k)
cst <- mean(sapply(nz, function(x){
if (!is.numeric(x)){
FALSE
}else{
# length(intersect(true, x))/length(union(true, x))
1-(length(union(true, x)) - length(intersect(true, x)))/tot
}
})) * 100
cst <- round(cst, digits = 3)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
# Select the top 10
freq <- as.vector(tab[1:min(10,length(tab))]/length(nz) * 100)
name <- name[1:min(10,length(name))]
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group=1))+
geom_line()+
geom_point(size=1)+
ylim(c(0,100))+
scale_x_continuous(breaks = 1:length(name), labels = name)+
xlab('variable index')+
ylab('Appearance frequency (%)')+
theme(
plot.title = element_text(size=16),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16)
)+
labs(title = paste0(titles[k], ' (consistency = ', cst, '%)'))
print(g)
}
# 2. Cumulative apperance
titles = c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# titles = c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
for (k in 1:4){
# nz <- lapply(ord_est, '[[', k)
nz <- lapply(boot_nz, '[[', k)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
freq <- sapply(seq_len(length(name)), function(i){
ind <- name[1:i]
num <- mean(sapply(nz, function(x){
if (!is.numeric(x)){
0
}else{
all(ind %in% x)
}
})) * 100
})
# select larger than 10%
freq <- freq[1:min(10,length(freq))]
name <- name[1:min(10,length(name))]
area <- trapz(1:length(freq), freq)/100
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group = 1))+
geom_line()+
geom_point(size=1)+
scale_x_continuous(breaks = 1:length(name), labels = name)+
ylim(c(0,100))+
xlab('variable index')+
ylab('Cumulative appearance frequency (%)')+
theme(
plot.title = element_text(size=12),
axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12)
)+
labs(title = paste0(titles[k], ' (AUC = ', area, ')'))
# theme(axis.text.x=element_text(angle=45, size = 4, vjust = 0.8))
print(g)
}
##########################################
## predictions
library(xtable)
err <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
colMeans(tmp, na.rm = TRUE)*100
})
std <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
apply(tmp, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(tmp))})*100
})
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/err_list_4_2pfc_LOO')
library(xtable)
err <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
colMeans(tmp, na.rm = TRUE)*100
})
std <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
apply(tmp, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(tmp))})*100
})
# tab <- matrix(paste0(round(err,2), '(', round(std,2), ')'), 4,4)
# colnames(tab) <- c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
# rownames(tab) <- c('Logistic', 'SVM', 'LDA', 'Random Forest')
# xtable(tab, caption = 'The classification error rate (\\%) and standard error ($\\times 10^{-2}$) based on 100 replicates.',
#        align = rep('c', dim(err)[2]+1))
tab <- matrix(paste0(round(err,2), '(', round(std,2), ')'), 4,4)
colnames(tab) <- c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
rownames(tab) <- c('Linear', 'Kernel (l.c.)', 'Random Forest', 'SVM')
xtable(tab, caption = 'The mean square error ($\\times 10^{-2}$) and standard error ($\\times 10^{-2}$) based on 100 replicates.',
align = rep('c', dim(err)[2]+1))
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/err_list_4_beef_2pfc_LOO')
library(xtable)
err <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
colMeans(tmp, na.rm = TRUE)*100
})
std <- sapply(1:4, function(i){
tmp <- do.call(rbind, lapply(err_list, '[[', i))
apply(tmp, 2, function(x){sd(x, na.rm = TRUE)/sqrt(nrow(tmp))})*100
})
# tab <- matrix(paste0(round(err,2), '(', round(std,2), ')'), 4,4)
# colnames(tab) <- c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
# rownames(tab) <- c('Logistic', 'SVM', 'LDA', 'Random Forest')
# xtable(tab, caption = 'The classification error rate (\\%) and standard error ($\\times 10^{-2}$) based on 100 replicates.',
#        align = rep('c', dim(err)[2]+1))
tab <- matrix(paste0(round(err,2), '(', round(std,2), ')'), 4,4)
colnames(tab) <- c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
rownames(tab) <- c('Linear', 'Kernel (l.c.)', 'Random Forest', 'SVM')
xtable(tab, caption = 'The mean square error ($\\times 10^{-2}$) and standard error ($\\times 10^{-2}$) based on 100 replicates.',
align = rep('c', dim(err)[2]+1))
debugSource('~/Documents/GitHub/ssdr/R_rd/NIR_meat_cont2.R')
library(latex2exp)
new_sir <- x %*% directions_sir
new_intra <- x %*% directions_intra
new_pfc <- x %*% directions_pfc
new_lassosir <- x %*% directions_lassosir
i <- 2
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_2^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the second component")
g
library(latex2exp)
new_sir <- x %*% directions_sir
new_intra <- x %*% directions_intra
new_pfc <- x %*% directions_pfc
new_lassosir <- x %*% directions_lassosir
i <- 1
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_1^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the first component")
g
new_intra <- -new_intra
new_pfc <- -new_pfc
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_1^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the first component")
g
i <- 2
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_2^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the second component")
g
new_intra <- -new_intra
i <- 2
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_2^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the second component")
g
debugSource('~/Documents/GitHub/ssdr/R_rd/NIR_meat_cont2.R')
new_sir <- x %*% directions_sir
new_intra <- x %*% directions_intra
new_pfc <- x %*% directions_pfc
new_lassosir <- x %*% directions_lassosir
i <- 1
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_1^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the first component")
g
new_intra <- -new_intra
new_pfc <- -new_pfc
new_sir <- x %*% directions_sir
new_intra <- x %*% directions_intra
new_pfc <- x %*% directions_pfc
new_lassosir <- x %*% directions_lassosir
i <- 1
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_1^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the first component")
g
new_intra <- -new_intra
new_pfc <- -new_pfc
i <- 1
data <- data.frame(x = rbind(new_sir[,i,drop=FALSE], new_intra[,i,drop=FALSE], new_pfc[,i,drop=FALSE], new_lassosir[,i,drop=FALSE]),
y = rep(y, 4),
class = factor(c(rep("SSDR_SIR", nrow(x)), rep("SSDR-intra", nrow(x)), rep("SSDR-PFC", nrow(x)), rep("Lasso-SIR", nrow(x))), levels = c("SSDR_SIR", "SSDR-intra", "SSDR-PFC", "Lasso-SIR")))
g <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~class, nrow = 2, ncol = 2, shrink = FALSE, scales = "free_x") +
xlab(TeX('$\\beta_1^T\\mathbf{X}$')) +
ylab(TeX('$\\mathbf{Y}$'))+
labs(title="Response versus the first component")
g
library(rifle)
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/output')
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat/true_output')
######################################
# estimation
library(xtable)
library(ggplot2)
library(pracma)
boot_rank <- do.call(rbind, lapply(output, '[[', 1))
boot_s <- do.call(rbind, lapply(output, '[[', 2))
boot_nz <- lapply(output, '[[', 4)
boot_dist <- do.call(rbind, lapply(output, '[[', 3))
boot_nz
# 1. Top 10 selected variables
titles = c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# titles = c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
true_nz <- true_output[[3]]
# true_nz <- true_output[[5]]
for (k in 1:4){
true <- true_nz[[k]]
nz <- lapply(boot_nz, '[[', k)
tot <- 103
# nz <- lapply(ord_est, '[[', k)
cst <- mean(sapply(nz, function(x){
if (!is.numeric(x)){
FALSE
}else{
# length(intersect(true, x))/length(union(true, x))
1-(length(union(true, x)) - length(intersect(true, x)))/tot
}
})) * 100
cst <- round(cst, digits = 3)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
# Select the top 10
freq <- as.vector(tab[1:min(10,length(tab))]/length(nz) * 100)
name <- name[1:min(10,length(name))]
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group=1))+
geom_line()+
geom_point(size=1)+
ylim(c(0,100))+
scale_x_continuous(breaks = 1:length(name), labels = name)+
xlab('variable index')+
ylab('Appearance frequency (%)')+
theme(
plot.title = element_text(size=16),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16)
)+
labs(title = paste0(titles[k], ' (SMC = ', cst, '%)'))
print(g)
}
titles = c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
true_nz <- true_output[[3]]
# true_nz <- true_output[[5]]
for (k in 1:4){
true <- true_nz[[k]]
nz <- lapply(boot_nz, '[[', k)
tot <- 103
# nz <- lapply(ord_est, '[[', k)
cst <- mean(sapply(nz, function(x){
if (!is.numeric(x)){
FALSE
}else{
# length(intersect(true, x))/length(union(true, x))
1-(length(union(true, x)) - length(intersect(true, x)))/tot
}
})) * 100
cst <- round(cst, digits = 3)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
# Select the top 10
freq <- as.vector(tab[1:min(10,length(tab))]/length(nz) * 100)
name <- name[1:min(10,length(name))]
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group=1))+
geom_line()+
geom_point(size=1)+
ylim(c(0,100))+
scale_x_continuous(breaks = 1:length(name), labels = name)+
xlab('variable index')+
ylab('Appearance frequency (%)')+
theme(
plot.title = element_text(size=16),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16)
)+
labs(title = paste0(titles[k], ' (SMC = ', cst, '%)'))
print(g)
}
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/output_4_2pfc')
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/true_output_4_2pfc')
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/output_4')
load('~/Documents/DIS/Record/2019/Sep9_2019/NIR_meat_cont_new/true_output_4')
######################################
# estimation
library(xtable)
library(ggplot2)
library(pracma)
boot_rank <- do.call(rbind, lapply(output, '[[', 1))
boot_s <- do.call(rbind, lapply(output, '[[', 2))
boot_nz <- lapply(output, '[[', 4)
boot_dist <- do.call(rbind, lapply(output, '[[', 3))
ord <- lapply(output, '[[', 5)
ord_est <- lapply(output, '[[', 6)
# 1. Top 10 selected variables
titles = c('SSDR-SIR', 'SSDR-intra', 'SSDR-PFC', 'Lasso-SIR')
# titles = c('SSDR-SIR', 'Lasso-SIR', 'Lasso', 'Rifle-SIR')
true_nz <- true_output[[3]]
# true_nz <- true_output[[5]]
for (k in 1:4){
true <- true_nz[[k]]
nz <- lapply(boot_nz, '[[', k)
tot <- 103
# nz <- lapply(ord_est, '[[', k)
cst <- mean(sapply(nz, function(x){
if (!is.numeric(x)){
FALSE
}else{
# length(intersect(true, x))/length(union(true, x))
1-(length(union(true, x)) - length(intersect(true, x)))/tot
}
})) * 100
cst <- round(cst, digits = 3)
tab <- sort(table(do.call(c, nz)), decreasing = TRUE)
name <- as.integer(names(tab))
# Select the top 10
freq <- as.vector(tab[1:min(10,length(tab))]/length(nz) * 100)
name <- name[1:min(10,length(name))]
g <- ggplot(data.frame(x=1:length(name), y=freq), aes(x=x, y=y, group=1))+
geom_line()+
geom_point(size=1)+
ylim(c(0,100))+
scale_x_continuous(breaks = 1:length(name), labels = name)+
xlab('variable index')+
ylab('Appearance frequency (%)')+
theme(
plot.title = element_text(size=16),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16)
)+
labs(title = paste0(titles[k], ' (SMC = ', cst, '%)'))
print(g)
}
AR <- function(rho, p){
m <- matrix(0, p, p)
for (i in 1:p){
for (j in 1:p){
m[i,j] <- rho**(abs(i-j))
}
return(m)
}
AR(0.5, 1-)
AR(0.5, 10)
solve(AR(0.5,5))
debugSource('~/Documents/GitHub/ssdr/R/ssdr_cv.R')
True_sp
